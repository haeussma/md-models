{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MD-Models","text":"<p>Markdown models are a way to define data models in a human-readable format. The models can be used to generate code, documentation and other formats from a single source of truth.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Human-readable - Markdown models are easy to read and write for humans.</li> <li>Extendable - Extension is simple, diffable and mergable with other models.</li> <li>Machine-readable - Convert your model into other schema languages such as JSON Schema, XSD and more.</li> <li>Code generation - Generate code in different programming languages such as Python and Typescript.</li> <li>Documentation - Generate documentation pages for mkdocs.</li> <li>Validation - Validate data against the defined schema.</li> <li>Semantic - Define semantic relationships between data structures.</li> </ul>"},{"location":"#motivation","title":"Motivation","text":"<p>There exist many ways to formalize real-world structures into data schemes and make them machine-readable and thus applicable in software solutions. However, existing schema languages such JSON Schema or XML Schema are often hard to read and write for humans, especially for non-developers. Markdown models aim to provide a human-readable way to define data models and invite users from different backgrounds to contribute to the definition of data models.</p> <p>Wait, not another schema language!</p> <p>We are aware that there are many schema languages out there, and we do not aim to replace them. Instead, we aim to provide a way to define data models in a human-readable format that can be used to convert into other schema languages and programming languages. Our goal is to provide a gateway for non-developers to contribute to the definition of data models and to make the process of defining data models more accessible to a broader audience, while ensuring the integrity into existing solutions.</p>"},{"location":"#how-it-works","title":"How it works","text":"<p>Markdown models are defined in a simple markdown format. The format is based on the CommonMark specification and can be extended with custom syntax. The concept is simple: Level 3 headings initialize a new type and the following list items define the fields of the type.</p> Person.mdPerson.jsonPerson.xsd <pre><code>### Person\n\nThis is a simple data model that describes a person. You can also add\nimages, links and other markdown elements to your documentation.\nFeel free to be creative!\n\n- name\n  - Type: string\n  - Description: Name of the person\n- age\n  - Type: integer\n  - Description: Age of the person\n</code></pre> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Person\",\n  \"description\": \"This is a simple data model that describes a person [...]\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"description\": \"Name of the person\"\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"description\": \"Age of the person\"\n    }\n  },\n  \"required\": [\"name\", \"age\"]\n}\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"&gt;\n  &lt;xs:element name=\"person\"&gt;\n    &lt;xs:annotation&gt;\n      &lt;xs:documentation&gt;\n        This is a simple data model that describes a person [...]\n      &lt;/xs:documentation&gt;\n    &lt;/xs:annotation&gt;\n    &lt;xs:complexType&gt;\n      &lt;xs:sequence&gt;\n        &lt;xs:element name=\"name\" type=\"xs:string\"&gt;\n          &lt;xs:annotation&gt;\n            &lt;xs:documentation&gt;Name of the person&lt;/xs:documentation&gt;\n          &lt;/xs:annotation&gt;\n        &lt;/xs:element&gt;\n        &lt;xs:element name=\"age\" type=\"xs:integer\"&gt;\n          &lt;xs:annotation&gt;\n            &lt;xs:documentation&gt;Age of the person&lt;/xs:documentation&gt;\n          &lt;/xs:annotation&gt;\n        &lt;/xs:element&gt;\n      &lt;/xs:sequence&gt;\n    &lt;/xs:complexType&gt;\n  &lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre> <p>All three formats describe the same data model, but the markdown version offers more readability compared to the JSON and XML versions. In fact, you can even add text/image documentation to any part of your data model and thus communicate the purpose of the data model to other users. The MD-Models library will recognize non-structural elements that are not part of the data model and will not include them in the generated outputs.</p> <p>Want to learn more? Check out the syntax documentation!</p>"},{"location":"#how-to-use","title":"How to use","text":"<p>The MD-Models library is available as a Rust library/binary and can be used to convert and validate markdown data models. We currently support the following templates:</p> <ul> <li>JSON Schema</li> <li>XML Schema Definition (XSD)</li> <li>ShEx</li> <li>SHACL</li> <li>Python-Dataclasses</li> <li>Python-Pydantic</li> <li>Typescript Interfaces</li> <li>Markdown Documentation</li> </ul> <p>We are planning to add more templates in the future. If you have a specific template in mind, feel free to open an issue or a pull request. Alternatively, you can also write your own template and use it with the MD-Models library.</p> <p>Want to learn more? Check out the library documentation!</p>"},{"location":"library/","title":"Overview","text":"<p>\ud83d\udea7 Under Construction \ud83d\udea7</p>"},{"location":"library/code-generation/","title":"Code Generation","text":"<p>\ud83d\udea7 Under Construction \ud83d\udea7</p>"},{"location":"library/conversion/","title":"Conversion","text":"<p>\ud83d\udea7 Under Construction \ud83d\udea7</p>"},{"location":"library/pipelines/","title":"Continuous integration","text":"<p>\ud83d\udea7 Under Construction \ud83d\udea7</p>"},{"location":"library/validation/","title":"Validation","text":"<p>\ud83d\udea7 Under Construction \ud83d\udea7</p>"},{"location":"syntax/","title":"Overview","text":"<p>\ud83d\udea7 Under Construction \ud83d\udea7</p>"},{"location":"syntax/configuration/","title":"Configuration","text":"<p>\ud83d\udea7 Under Construction \ud83d\udea7</p>"},{"location":"syntax/enumerations/","title":"Enumerations","text":"<p>\ud83d\udea7 Under Construction \ud83d\udea7</p>"},{"location":"syntax/ontologies/","title":"Ontologies","text":"<p>\ud83d\udea7 Under Construction \ud83d\udea7</p>"},{"location":"syntax/types/","title":"Types","text":"<p>\ud83d\udea7 Under Construction \ud83d\udea7</p>"},{"location":"types/","title":"MD-Models Types","text":"<p>This page contains types that the MD-Models library provides from of the shelf. You can use these types in your own data models by simply referencing them in your data model's attributes <code>Type</code> section.</p>"},{"location":"types/#types-available","title":"Types available","text":"<ul> <li>Unit Definition</li> <li>Equation</li> </ul>"},{"location":"types/#how-to-use","title":"How to use","text":"<p>To use a type in your data model, simply reference it in the <code>Type</code> section of your data model's attribute. For example, to use the <code>UnitDefinition</code> type in your data model, you would write:</p> <pre><code>- unit\n  - Type: UnitDefinition\n  - Description: Unit of the estimated parameter.\n</code></pre> <p>This will add the <code>UnitDefinition</code> type to your data model and can thus be used across your data model. If you like to modify these types, feel free to copy the markdown file to your own project and modify it as you see fit.</p>"},{"location":"types/#contributing","title":"Contributing","text":"<p>If you have a type that you think would be useful for others, feel free to create a pull request to add it to this repository. We are happy to accept any contributions that you think would be useful for others.</p> <p>If you want to propose changes to an existing type, please only edit the corresponding markdown file in this repository. The continuous integration will automatically update the repository in your branch with the changes you propose. After the CI has successfully run, you can create a pull request to merge your changes into the main branch.</p>"},{"location":"types/equation/","title":"Equation","text":"<p>This page provides comprehensive information about the structure and components of the data model, including detailed descriptions of the types and their properties, information on enumerations, and an overview of the ontologies used and their associated prefixes. Below, you will find a graph that visually represents the overall structure of the data model.</p> Graph <pre><code>flowchart TB\n    equation(Equation)\n    eqvariable(EqVariable)\n    eqparameter(EqParameter)\n    equation(Equation) --&gt; eqvariable(EqVariable)\n    equation(Equation) --&gt; eqparameter(EqParameter)\n\n    click equation \"#equation\" \"Go to Equation\"\n    click eqvariable \"#eqvariable\" \"Go to EqVariable\"\n    click eqparameter \"#eqparameter\" \"Go to EqParameter\"</code></pre>"},{"location":"types/equation/#types","title":"Types","text":""},{"location":"types/equation/#equation_1","title":"Equation","text":"<p>Represents an equation that can be used in a data model.</p> <p>equation* <code>string</code></p> <ul> <li>The equation that is used in the data model.</li> </ul> <p>variables <code>list[EqVariable]</code></p> <ul> <li>List of variables that are used in the equation.</li> </ul> <p>parameters <code>list[EqParameter]</code></p> <ul> <li>List of parameters that are used in the equation.</li> </ul>"},{"location":"types/equation/#eqvariable","title":"EqVariable","text":"<p>Represents a variable that is used in the equation.</p> <p>id* <code>string</code></p> <ul> <li>Unique identifier for the variable.</li> </ul> <p>name* <code>string</code></p> <ul> <li>Name of the variable.</li> </ul> <p>symbol <code>string</code></p> <ul> <li>Symbol of the variable.</li> </ul>"},{"location":"types/equation/#eqparameter","title":"EqParameter","text":"<p>Represents a parameter that is used in the equation.</p> <p>id* <code>string</code></p> <ul> <li>Unique identifier for the parameter.</li> </ul> <p>name* <code>string</code></p> <ul> <li>Name of the parameter.</li> </ul> <p>symbol <code>string</code></p> <ul> <li>Symbol of the parameter.</li> </ul> <p>value <code>float</code></p> <ul> <li>Value of the parameter.</li> </ul>"},{"location":"types/unit-definition/","title":"SI Unit","text":"<p>This page provides comprehensive information about the structure and components of the data model, including detailed descriptions of the types and their properties, information on enumerations, and an overview of the ontologies used and their associated prefixes. Below, you will find a graph that visually represents the overall structure of the data model.</p> Graph <pre><code>flowchart TB\n    unitdefinition(UnitDefinition)\n    baseunit(BaseUnit)\n    unittype(UnitType)\n    unitdefinition(UnitDefinition) --&gt; baseunit(BaseUnit)\n    baseunit(BaseUnit) --&gt; unittype(UnitType)\n\n    click unitdefinition \"#unitdefinition\" \"Go to UnitDefinition\"\n    click baseunit \"#baseunit\" \"Go to BaseUnit\"\n    click unittype \"#unittype\" \"Go to UnitType\"</code></pre>"},{"location":"types/unit-definition/#types","title":"Types","text":""},{"location":"types/unit-definition/#unitdefinition","title":"UnitDefinition","text":"<p>Represents a unit definition that is based on the SI unit system.</p> <p>id <code>string</code></p> <ul> <li>Unique identifier of the unit definition.</li> </ul> <p>name <code>string</code></p> <ul> <li>Common name of the unit definition.</li> </ul> <p>base_units <code>list[BaseUnit]</code></p> <ul> <li>Base units that define the unit.</li> </ul>"},{"location":"types/unit-definition/#baseunit","title":"BaseUnit","text":"<p>Represents a base unit in the unit definition.</p> <p>kind* <code>UnitType</code></p> <ul> <li>Kind of the base unit (e.g., meter, kilogram, second).</li> </ul> <p>exponent* <code>integer</code></p> <ul> <li>Exponent of the base unit in the unit definition.</li> </ul> <p>multiplier <code>float</code></p> <ul> <li>Multiplier of the base unit in the unit definition.</li> </ul> <p>scale <code>float</code></p> <ul> <li>Scale of the base unit in the unit definition.</li> </ul>"},{"location":"types/unit-definition/#enumerations","title":"Enumerations","text":""},{"location":"types/unit-definition/#unittype","title":"UnitType","text":"Alias Value <code>AMPERE</code> ampere <code>AVOGADRO</code> avogadro <code>BECQUEREL</code> becquerel <code>CANDELA</code> candela <code>COULOMB</code> coulomb <code>DIMENSIONLESS</code> dimensionless <code>FARAD</code> farad <code>GRAM</code> gram <code>GRAY</code> gray <code>HENRY</code> henry <code>HERTZ</code> hertz <code>ITEM</code> item <code>JOULE</code> joule <code>KATAL</code> katal <code>KELVIN</code> kelvin <code>KILOGRAM</code> kilogram <code>LITRE</code> litre <code>LUMEN</code> lumen <code>LUX</code> lux <code>METRE</code> metre <code>MOLE</code> mole <code>NEWTON</code> newton <code>OHM</code> ohm <code>PASCAL</code> pascal <code>RADIAN</code> radian <code>SECOND</code> second <code>SIEMENS</code> siemens <code>SIEVERT</code> sievert <code>STERADIAN</code> steradian <code>TESLA</code> tesla <code>VOLT</code> volt <code>WATT</code> watt <code>WEBER</code> weber"}]}